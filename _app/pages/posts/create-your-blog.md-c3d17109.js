import{S as vl,i as wl,s as yl,B as Ln,v as _l,w as bl,x as El,y as gl,z as tl,p as xl,n as Sl,A as Il,a7 as el,e as o,t as a,j as r,c as l,a as p,g as n,d as s,l as u,b as d,f as i,P as e,Q as jl}from"../../chunks/vendor-2d459745.js";import{P as Cl}from"../../chunks/_post_layout-20bbffd2.js";function Pl(pt){let k,x,E,q,m,w,ct,rs,be,it,us,Ee,rt,ds,ge,W,z,ks,fs,xe,H,G,hs,ms,B,vs,ws,Se,ut,ys,Ie,S,_s,V,bs,Es,J,gs,xs,je,dt,Ss,Ce,kt,Is,Pe,I,Pt,js,Cs,Dt,Ps,Ds,Ot,Os,De,g,Ts,Tt,Ks,As,Kt,Hs,Ns,At,Rs,Ls,Oe,U,al=`<code class="language-undefined">route
\u251C\u2500\u2500 __layout.svelte
\u251C\u2500\u2500 about.svelte
\u251C\u2500\u2500 [slug].svelte
\u2514\u2500\u2500 index.svelte</code>`,Te,f,$s,Ht,Fs,Ms,Nt,qs,Ws,Rt,zs,Gs,Lt,Bs,Vs,$t,Js,Us,Ft,Qs,Ys,Mt,Zs,Xs,qt,ta,ea,Wt,sa,aa,zt,na,oa,Ke,j,la,Gt,pa,ca,Bt,ia,ra,Ae,ft,ua,He,y,da,Vt,ka,fa,Jt,ha,ma,Ut,va,wa,Qt,ya,_a,Ne,Q,nl=`<code class="language-html"><span class="token comment">&lt;!--lib/Nav.svelte--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>HOME<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>about<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>about<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`,Re,C,ba,Yt,Ea,ga,Zt,xa,Sa,Le,Y,ol=`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> <span class="token string">'../app.scss'</span><span class="token punctuation">;</span>
	<span class="token keyword">import</span> Nav <span class="token keyword">from</span> <span class="token string">'$lib/Nav.svelte'</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>g-app-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token punctuation">/></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`,$e,ht,Ia,Fe,R,ja,Xt,Ca,Pa,Me,v,Da,te,Oa,Ta,ee,Ka,Aa,se,Ha,Na,ae,Ra,La,ne,$a,Fa,oe,Ma,qa,qe,Z,ll=`<code class="language-js"><span class="token comment">// index.json.js</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// our markdown files lie in src/posts.</span>
	<span class="token keyword">let</span> postTitles <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">src/posts</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fileName</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getTitleFrom</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> body <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>postTitles<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token punctuation">&#123;</span> body <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,We,L,Wa,le,za,Ga,ze,P,Ba,pe,Va,Ja,ce,Ua,Qa,Ge,X,pl=`<code class="language-js"><span class="token comment">// [slug].json.js</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> params <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// we could get the dynamic slug from the parameter of get.</span>
	<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> slug <span class="token punctuation">&#125;</span> <span class="token operator">=</span> params<span class="token punctuation">;</span>

	<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> metadata<span class="token punctuation">,</span> content <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">src/posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>slug<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.md</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> body <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> metadata<span class="token punctuation">,</span> content <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token punctuation">&#123;</span> body <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Be,D,Ya,ie,Za,Xa,re,tn,en,Ve,tt,cl=`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> page<span class="token punctuation">,</span> fetch <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">const</span> slug <span class="token operator">=</span> page<span class="token punctuation">.</span>params<span class="token punctuation">.</span>slug<span class="token punctuation">;</span>
		<span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>slug<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.json</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=></span> r<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
			props<span class="token operator">:</span> <span class="token punctuation">&#123;</span> post <span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
	<span class="token comment">// post will have metadata and content</span>
	<span class="token keyword">export</span> <span class="token keyword">let</span> post<span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!--show the post html with @html--></span>
&#123;@html post.content&#125;</code>`,Je,_,sn,ue,an,nn,de,on,ln,ke,pn,cn,fe,rn,un,Ue,O,dn,he,kn,fn,me,hn,mn,Qe,mt,vn,Ye,T,wn,et,yn,_n,st,bn,En,Ze,N,at,gn,xn,nt,Sn,In,Xe,ot,il=`<code class="language-js"><span class="token keyword">import</span> vfile <span class="token keyword">from</span> <span class="token string">'to-vfile'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> unified <span class="token keyword">from</span> <span class="token string">'unified'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> remarkParse <span class="token keyword">from</span> <span class="token string">'remark-parse'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> remark2rehype <span class="token keyword">from</span> <span class="token string">'remark-rehype'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> stringify <span class="token keyword">from</span> <span class="token string">'rehype-stringify'</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> processor <span class="token operator">=</span> <span class="token function">unified</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>remarkParse<span class="token punctuation">)</span> <span class="token comment">// parse into markdown syntax tree</span>
	<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>remark2rehype<span class="token punctuation">)</span> <span class="token comment">// convert to html syntax tree</span>
	<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>stringify<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// turn html syntax tree to html</span>

<span class="token comment">// process function will return the generated html string.</span>
<span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// use vfile to read the file, could use fs if you like.</span>
	<span class="token keyword">return</span> processor<span class="token punctuation">.</span><span class="token function">processSync</span><span class="token punctuation">(</span>vfile<span class="token punctuation">.</span><span class="token function">readSync</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ts,vt,jn,es,$,Cn,lt,ve,Pn,Dn,ss,wt,On,as,yt,Tn,ns,_t,Kn,os,F,An,we,Hn,Nn;return{c(){k=o("p"),x=a("Recently, SvelteKit is "),E=o("a"),q=a("released in public beta"),m=a(". And we could finally see what Rich Harris called \u201D"),w=o("a"),ct=a("Futuristic Web Development"),rs=a("\u201D looks like. It\u2019s always better to learn with project, so I made a little blog (the one you are reading) with SvelteKit and deployed it on the Github Pages. And this series of posts are the things I learnt."),be=r(),it=o("h2"),us=a("Brief Intro of Svelte and SvelteKit"),Ee=r(),rt=o("p"),ds=a("For those who are not familiar with Svelte and SvelteKit:"),ge=r(),W=o("p"),z=o("a"),ks=a("Svelte"),fs=a(" is a reactive Web component framework. Unlike traditionaly counterparts like React and Vue, Svelte does not use virtual dom (vdom). Instead, Svelte compiles the app to vanilla js during building. This results in an extreme small bundle size and blazing fast speed, as the app no longer contains runtime code and has get rid of the overheads of vdom relevant computation. In addition, Svelte is designed to be very close to plain HTML and CSS, which makes the code clean and easy to read."),xe=r(),H=o("p"),G=o("a"),hs=a("SvelteKit"),ms=a(" is the framework for building Svelte based app. With the help of "),B=o("a"),vs=a("Vite"),ws=a(", SvelteKit provides excellent developing experience."),Se=r(),ut=o("h2"),ys=a("Minimal SvelteKit Tutorial"),Ie=r(),S=o("p"),_s=a("I\u2019m not going to introduce how to use Svelte in this series of posts, as the official doc has done a great job. As for SvelteKit, I will try to cover only the bits and bobs used for the blog app. Anyway, it\u2019s very recommended to go through the "),V=o("a"),bs=a("Svelte tutorial"),Es=a(" and the "),J=o("a"),gs=a("SvelteKit doc"),xs=a("."),je=r(),dt=o("h3"),Ss=a("Routing and Layout"),Ce=r(),kt=o("p"),Is=a("The blog site contains 3 types of pages:"),Pe=r(),I=o("ul"),Pt=o("li"),js=a("index page: show the list of post titles"),Cs=r(),Dt=o("li"),Ps=a("post page: render markdown file into beautiful html"),Ds=r(),Ot=o("li"),Os=a("about page: show about information"),De=r(),g=o("p"),Ts=a("In SvelteKit, we have a so-called "),Tt=o("em"),Ks=a("a filesystem-based router"),As=a(". The files in "),Kt=o("code"),Hs=a("src/route"),Ns=a(" will correspond to the actual webpage. In our case, the folder structure of "),At=o("code"),Rs=a("src/route"),Ls=a(" would be:"),Oe=r(),U=o("pre"),Te=r(),f=o("p"),$s=a("where "),Ht=o("code"),Fs=a("about.svelte"),Ms=a(" will be "),Nt=o("code"),qs=a("xxx.com/about"),Ws=a(", "),Rt=o("code"),zs=a("index.svelte"),Gs=a(" will be "),Lt=o("code"),Bs=a("xxx.com/"),Vs=a(". As for the "),$t=o("code"),Js=a("[slug].svelte"),Us=a(", it is a dynamic route, whose dynamic parameter is the "),Ft=o("code"),Qs=a("slug"),Ys=a(" in the bracket. For example, we may have a generated "),Mt=o("code"),Zs=a("xxx.com/hello-world"),Xs=a(", then SvelteKit will use "),qt=o("code"),ta=a("[slug].svelte"),ea=a(" to generate this page and set "),Wt=o("code"),sa=a("slug"),aa=a(" to "),zt=o("code"),na=a("hello-world"),oa=a("."),Ke=r(),j=o("p"),la=a("The remaining "),Gt=o("code"),pa=a("__layout.svelte"),ca=a(" file serves as the layout template, all other files will be rendered inside the "),Bt=o("code"),ia=a("<slot></slot>"),ra=a(" of it."),Ae=r(),ft=o("h3"),ua=a("Import Components"),He=r(),y=o("p"),da=a("A typical use of the layout file is adding a navigation bar. In SvelteKit, we should put the extracted components in "),Vt=o("code"),ka=a("src/lib"),fa=a(" and use the "),Jt=o("code"),ha=a("$lib/xxx"),ma=a(" to import them. In our case, I added a "),Ut=o("code"),va=a("Nav.svelte"),wa=a(" in "),Qt=o("code"),ya=a("src/lib"),_a=a(":"),Ne=r(),Q=o("pre"),Re=r(),C=o("p"),ba=a("And in "),Yt=o("code"),Ea=a("__layout.svelte"),ga=a(", I can import the "),Zt=o("code"),xa=a("Nav"),Sa=a(" component in this way:"),Le=r(),Y=o("pre"),$e=r(),ht=o("h3"),Ia=a("EndPoints and Data Loading"),Fe=r(),R=o("p"),ja=a("With routing, layout and components, we could build most of the blog. But there is one important question: how should we get the markdown file and render it to beautiful html? I\u2019ll talk about the details about how to parse the markdown file with "),Xt=o("code"),Ca=a("remark"),Pa=a(" later. For now, let\u2019s take a step back: we need to understand how SvelteKit would load the data from server to browser."),Me=r(),v=o("p"),Da=a("In SvelteKit, data are transfered in JSON format. For each page component that requires data, we need to create a corresponding "),te=o("code"),Oa=a(".json.js"),Ta=a(" as the endpoints. "),ee=o("strong"),Ka=a("Endpoints"),Aa=a(" in SvelteKit are those "),se=o("code"),Ha=a(".js"),Na=a(" (or "),ae=o("code"),Ra=a(".ts"),La=a(" if you are using TypeScript) files that contains functions for HTTP methods. For example, in the index page, we need to get the list of post titles from the server (assume we are hosting the app with a server instead of generating static pages), therefore, we need to create a "),ne=o("code"),$a=a("index.json.js"),Fa=a(" file with a "),oe=o("code"),Ma=a("get"),qa=a(" function:"),qe=r(),Z=o("pre"),We=r(),L=o("p"),Wa=a("Notive that because the endpoints will be run on the server, we can use libraries like "),le=o("code"),za=a("fs"),Ga=a("."),ze=r(),P=o("p"),Ba=a("And for the "),pe=o("code"),Va=a("[slug].svelte"),Ja=a(" page, we will also have a "),ce=o("code"),Ua=a("[slug].json.js"),Qa=a(" to get the post html:"),Ge=r(),X=o("pre"),Be=r(),D=o("p"),Ya=a("Now we have the function that supply the data, we can use the "),ie=o("code"),Za=a("load"),Xa=a(" function to load them. Take "),re=o("code"),tn=a("[slug].svelte"),en=a(" as example, we will add"),Ve=r(),tt=o("pre"),Je=r(),_=o("p"),sn=a("to the top of the "),ue=o("code"),an=a("[slug].svelte"),nn=a(", so that the page could get data from "),de=o("code"),on=a("${slug}.json"),ln=a(". And remember to add "),ke=o("code"),pn=a('context="module"'),cn=a(" to the script tag around "),fe=o("code"),rn=a("load"),un=a(", as we need the data load before the component is rendered."),Ue=r(),O=o("p"),dn=a("Similarly, we could add the "),he=o("code"),kn=a("load"),fn=a(" function to "),me=o("code"),hn=a("index.svelte"),mn=a(" and this is the basic data stream in SvelteKit."),Qe=r(),mt=o("h2"),vn=a("Parse and Render the markdown files"),Ye=r(),T=o("p"),wn=a("For this blog, I chose "),et=o("a"),yn=a("remark"),_n=a(" as the markdown processor. It is one of the most popular markdown parser now and is the one that supports the great "),st=o("a"),bn=a("Gatsby"),En=a("."),Ze=r(),N=o("p"),at=o("a"),gn=a("remark"),xn=a(" is actually a part of the "),nt=o("a"),Sn=a("unifiedjs"),In=a(" ecosystem, a bunch of tools to help extracting the syntax tree or converting between content formats like markdown or html. To convert a markdown file into html, we could simply:"),Xe=r(),ot=o("pre"),ts=r(),vt=o("p"),jn=a("Notice that unifiedjs is organized with multi-repo pattern and all the packages imported in the above snippet are in separate repos."),es=r(),$=o("p"),Cn=a("To get the title of the markdown file for index page, I added a metadata section to the markdown file. I\u2019m not sure if I did this in the correctly, so I\u2019m not going to describe my solution. If you have interest in parsing the metadata of the markdown, please refer to the "),lt=o("a"),ve=o("code"),Pn=a("markdown.js"),Dn=a(" file in the repo."),ss=r(),wt=o("h2"),On=a("Conclusion"),as=r(),yt=o("p"),Tn=a("Hurray! We have built a blog app that runs locally. Next I will show you how to deploy the blog to Github Pages."),ns=r(),_t=o("h2"),Kn=a("Tips"),os=r(),F=o("p"),An=a("Some confusing errors could be solved by moving the dependencies to "),we=o("code"),Hn=a("devDependencies"),Nn=a(" due to some bugs of Vite."),this.h()},l(t){k=l(t,"P",{});var c=p(k);x=n(c,"Recently, SvelteKit is "),E=l(c,"A",{href:!0,rel:!0});var $n=p(E);q=n($n,"released in public beta"),$n.forEach(s),m=n(c,". And we could finally see what Rich Harris called \u201D"),w=l(c,"A",{href:!0,rel:!0});var Fn=p(w);ct=n(Fn,"Futuristic Web Development"),Fn.forEach(s),rs=n(c,"\u201D looks like. It\u2019s always better to learn with project, so I made a little blog (the one you are reading) with SvelteKit and deployed it on the Github Pages. And this series of posts are the things I learnt."),c.forEach(s),be=u(t),it=l(t,"H2",{});var Mn=p(it);us=n(Mn,"Brief Intro of Svelte and SvelteKit"),Mn.forEach(s),Ee=u(t),rt=l(t,"P",{});var qn=p(rt);ds=n(qn,"For those who are not familiar with Svelte and SvelteKit:"),qn.forEach(s),ge=u(t),W=l(t,"P",{});var Rn=p(W);z=l(Rn,"A",{href:!0,rel:!0});var Wn=p(z);ks=n(Wn,"Svelte"),Wn.forEach(s),fs=n(Rn," is a reactive Web component framework. Unlike traditionaly counterparts like React and Vue, Svelte does not use virtual dom (vdom). Instead, Svelte compiles the app to vanilla js during building. This results in an extreme small bundle size and blazing fast speed, as the app no longer contains runtime code and has get rid of the overheads of vdom relevant computation. In addition, Svelte is designed to be very close to plain HTML and CSS, which makes the code clean and easy to read."),Rn.forEach(s),xe=u(t),H=l(t,"P",{});var ye=p(H);G=l(ye,"A",{href:!0,rel:!0});var zn=p(G);hs=n(zn,"SvelteKit"),zn.forEach(s),ms=n(ye," is the framework for building Svelte based app. With the help of "),B=l(ye,"A",{href:!0,rel:!0});var Gn=p(B);vs=n(Gn,"Vite"),Gn.forEach(s),ws=n(ye,", SvelteKit provides excellent developing experience."),ye.forEach(s),Se=u(t),ut=l(t,"H2",{});var Bn=p(ut);ys=n(Bn,"Minimal SvelteKit Tutorial"),Bn.forEach(s),Ie=u(t),S=l(t,"P",{});var bt=p(S);_s=n(bt,"I\u2019m not going to introduce how to use Svelte in this series of posts, as the official doc has done a great job. As for SvelteKit, I will try to cover only the bits and bobs used for the blog app. Anyway, it\u2019s very recommended to go through the "),V=l(bt,"A",{href:!0,rel:!0});var Vn=p(V);bs=n(Vn,"Svelte tutorial"),Vn.forEach(s),Es=n(bt," and the "),J=l(bt,"A",{href:!0,rel:!0});var Jn=p(J);gs=n(Jn,"SvelteKit doc"),Jn.forEach(s),xs=n(bt,"."),bt.forEach(s),je=u(t),dt=l(t,"H3",{});var Un=p(dt);Ss=n(Un,"Routing and Layout"),Un.forEach(s),Ce=u(t),kt=l(t,"P",{});var Qn=p(kt);Is=n(Qn,"The blog site contains 3 types of pages:"),Qn.forEach(s),Pe=u(t),I=l(t,"UL",{});var Et=p(I);Pt=l(Et,"LI",{});var Yn=p(Pt);js=n(Yn,"index page: show the list of post titles"),Yn.forEach(s),Cs=u(Et),Dt=l(Et,"LI",{});var Zn=p(Dt);Ps=n(Zn,"post page: render markdown file into beautiful html"),Zn.forEach(s),Ds=u(Et),Ot=l(Et,"LI",{});var Xn=p(Ot);Os=n(Xn,"about page: show about information"),Xn.forEach(s),Et.forEach(s),De=u(t),g=l(t,"P",{});var M=p(g);Ts=n(M,"In SvelteKit, we have a so-called "),Tt=l(M,"EM",{});var to=p(Tt);Ks=n(to,"a filesystem-based router"),to.forEach(s),As=n(M,". The files in "),Kt=l(M,"CODE",{});var eo=p(Kt);Hs=n(eo,"src/route"),eo.forEach(s),Ns=n(M," will correspond to the actual webpage. In our case, the folder structure of "),At=l(M,"CODE",{});var so=p(At);Rs=n(so,"src/route"),so.forEach(s),Ls=n(M," would be:"),M.forEach(s),Oe=u(t),U=l(t,"PRE",{class:!0});var rl=p(U);rl.forEach(s),Te=u(t),f=l(t,"P",{});var h=p(f);$s=n(h,"where "),Ht=l(h,"CODE",{});var ao=p(Ht);Fs=n(ao,"about.svelte"),ao.forEach(s),Ms=n(h," will be "),Nt=l(h,"CODE",{});var no=p(Nt);qs=n(no,"xxx.com/about"),no.forEach(s),Ws=n(h,", "),Rt=l(h,"CODE",{});var oo=p(Rt);zs=n(oo,"index.svelte"),oo.forEach(s),Gs=n(h," will be "),Lt=l(h,"CODE",{});var lo=p(Lt);Bs=n(lo,"xxx.com/"),lo.forEach(s),Vs=n(h,". As for the "),$t=l(h,"CODE",{});var po=p($t);Js=n(po,"[slug].svelte"),po.forEach(s),Us=n(h,", it is a dynamic route, whose dynamic parameter is the "),Ft=l(h,"CODE",{});var co=p(Ft);Qs=n(co,"slug"),co.forEach(s),Ys=n(h," in the bracket. For example, we may have a generated "),Mt=l(h,"CODE",{});var io=p(Mt);Zs=n(io,"xxx.com/hello-world"),io.forEach(s),Xs=n(h,", then SvelteKit will use "),qt=l(h,"CODE",{});var ro=p(qt);ta=n(ro,"[slug].svelte"),ro.forEach(s),ea=n(h," to generate this page and set "),Wt=l(h,"CODE",{});var uo=p(Wt);sa=n(uo,"slug"),uo.forEach(s),aa=n(h," to "),zt=l(h,"CODE",{});var ko=p(zt);na=n(ko,"hello-world"),ko.forEach(s),oa=n(h,"."),h.forEach(s),Ke=u(t),j=l(t,"P",{});var gt=p(j);la=n(gt,"The remaining "),Gt=l(gt,"CODE",{});var fo=p(Gt);pa=n(fo,"__layout.svelte"),fo.forEach(s),ca=n(gt," file serves as the layout template, all other files will be rendered inside the "),Bt=l(gt,"CODE",{});var ho=p(Bt);ia=n(ho,"<slot></slot>"),ho.forEach(s),ra=n(gt," of it."),gt.forEach(s),Ae=u(t),ft=l(t,"H3",{});var mo=p(ft);ua=n(mo,"Import Components"),mo.forEach(s),He=u(t),y=l(t,"P",{});var K=p(y);da=n(K,"A typical use of the layout file is adding a navigation bar. In SvelteKit, we should put the extracted components in "),Vt=l(K,"CODE",{});var vo=p(Vt);ka=n(vo,"src/lib"),vo.forEach(s),fa=n(K," and use the "),Jt=l(K,"CODE",{});var wo=p(Jt);ha=n(wo,"$lib/xxx"),wo.forEach(s),ma=n(K," to import them. In our case, I added a "),Ut=l(K,"CODE",{});var yo=p(Ut);va=n(yo,"Nav.svelte"),yo.forEach(s),wa=n(K," in "),Qt=l(K,"CODE",{});var _o=p(Qt);ya=n(_o,"src/lib"),_o.forEach(s),_a=n(K,":"),K.forEach(s),Ne=u(t),Q=l(t,"PRE",{class:!0});var ul=p(Q);ul.forEach(s),Re=u(t),C=l(t,"P",{});var xt=p(C);ba=n(xt,"And in "),Yt=l(xt,"CODE",{});var bo=p(Yt);Ea=n(bo,"__layout.svelte"),bo.forEach(s),ga=n(xt,", I can import the "),Zt=l(xt,"CODE",{});var Eo=p(Zt);xa=n(Eo,"Nav"),Eo.forEach(s),Sa=n(xt," component in this way:"),xt.forEach(s),Le=u(t),Y=l(t,"PRE",{class:!0});var dl=p(Y);dl.forEach(s),$e=u(t),ht=l(t,"H3",{});var go=p(ht);Ia=n(go,"EndPoints and Data Loading"),go.forEach(s),Fe=u(t),R=l(t,"P",{});var ls=p(R);ja=n(ls,"With routing, layout and components, we could build most of the blog. But there is one important question: how should we get the markdown file and render it to beautiful html? I\u2019ll talk about the details about how to parse the markdown file with "),Xt=l(ls,"CODE",{});var xo=p(Xt);Ca=n(xo,"remark"),xo.forEach(s),Pa=n(ls," later. For now, let\u2019s take a step back: we need to understand how SvelteKit would load the data from server to browser."),ls.forEach(s),Me=u(t),v=l(t,"P",{});var b=p(v);Da=n(b,"In SvelteKit, data are transfered in JSON format. For each page component that requires data, we need to create a corresponding "),te=l(b,"CODE",{});var So=p(te);Oa=n(So,".json.js"),So.forEach(s),Ta=n(b," as the endpoints. "),ee=l(b,"STRONG",{});var Io=p(ee);Ka=n(Io,"Endpoints"),Io.forEach(s),Aa=n(b," in SvelteKit are those "),se=l(b,"CODE",{});var jo=p(se);Ha=n(jo,".js"),jo.forEach(s),Na=n(b," (or "),ae=l(b,"CODE",{});var Co=p(ae);Ra=n(Co,".ts"),Co.forEach(s),La=n(b," if you are using TypeScript) files that contains functions for HTTP methods. For example, in the index page, we need to get the list of post titles from the server (assume we are hosting the app with a server instead of generating static pages), therefore, we need to create a "),ne=l(b,"CODE",{});var Po=p(ne);$a=n(Po,"index.json.js"),Po.forEach(s),Fa=n(b," file with a "),oe=l(b,"CODE",{});var Do=p(oe);Ma=n(Do,"get"),Do.forEach(s),qa=n(b," function:"),b.forEach(s),qe=u(t),Z=l(t,"PRE",{class:!0});var kl=p(Z);kl.forEach(s),We=u(t),L=l(t,"P",{});var ps=p(L);Wa=n(ps,"Notive that because the endpoints will be run on the server, we can use libraries like "),le=l(ps,"CODE",{});var Oo=p(le);za=n(Oo,"fs"),Oo.forEach(s),Ga=n(ps,"."),ps.forEach(s),ze=u(t),P=l(t,"P",{});var St=p(P);Ba=n(St,"And for the "),pe=l(St,"CODE",{});var To=p(pe);Va=n(To,"[slug].svelte"),To.forEach(s),Ja=n(St," page, we will also have a "),ce=l(St,"CODE",{});var Ko=p(ce);Ua=n(Ko,"[slug].json.js"),Ko.forEach(s),Qa=n(St," to get the post html:"),St.forEach(s),Ge=u(t),X=l(t,"PRE",{class:!0});var fl=p(X);fl.forEach(s),Be=u(t),D=l(t,"P",{});var It=p(D);Ya=n(It,"Now we have the function that supply the data, we can use the "),ie=l(It,"CODE",{});var Ao=p(ie);Za=n(Ao,"load"),Ao.forEach(s),Xa=n(It," function to load them. Take "),re=l(It,"CODE",{});var Ho=p(re);tn=n(Ho,"[slug].svelte"),Ho.forEach(s),en=n(It," as example, we will add"),It.forEach(s),Ve=u(t),tt=l(t,"PRE",{class:!0});var hl=p(tt);hl.forEach(s),Je=u(t),_=l(t,"P",{});var A=p(_);sn=n(A,"to the top of the "),ue=l(A,"CODE",{});var No=p(ue);an=n(No,"[slug].svelte"),No.forEach(s),nn=n(A,", so that the page could get data from "),de=l(A,"CODE",{});var Ro=p(de);on=n(Ro,"${slug}.json"),Ro.forEach(s),ln=n(A,". And remember to add "),ke=l(A,"CODE",{});var Lo=p(ke);pn=n(Lo,'context="module"'),Lo.forEach(s),cn=n(A," to the script tag around "),fe=l(A,"CODE",{});var $o=p(fe);rn=n($o,"load"),$o.forEach(s),un=n(A,", as we need the data load before the component is rendered."),A.forEach(s),Ue=u(t),O=l(t,"P",{});var jt=p(O);dn=n(jt,"Similarly, we could add the "),he=l(jt,"CODE",{});var Fo=p(he);kn=n(Fo,"load"),Fo.forEach(s),fn=n(jt," function to "),me=l(jt,"CODE",{});var Mo=p(me);hn=n(Mo,"index.svelte"),Mo.forEach(s),mn=n(jt," and this is the basic data stream in SvelteKit."),jt.forEach(s),Qe=u(t),mt=l(t,"H2",{});var qo=p(mt);vn=n(qo,"Parse and Render the markdown files"),qo.forEach(s),Ye=u(t),T=l(t,"P",{});var Ct=p(T);wn=n(Ct,"For this blog, I chose "),et=l(Ct,"A",{href:!0,rel:!0});var Wo=p(et);yn=n(Wo,"remark"),Wo.forEach(s),_n=n(Ct," as the markdown processor. It is one of the most popular markdown parser now and is the one that supports the great "),st=l(Ct,"A",{href:!0,rel:!0});var zo=p(st);bn=n(zo,"Gatsby"),zo.forEach(s),En=n(Ct,"."),Ct.forEach(s),Ze=u(t),N=l(t,"P",{});var _e=p(N);at=l(_e,"A",{href:!0,rel:!0});var Go=p(at);gn=n(Go,"remark"),Go.forEach(s),xn=n(_e," is actually a part of the "),nt=l(_e,"A",{href:!0,rel:!0});var Bo=p(nt);Sn=n(Bo,"unifiedjs"),Bo.forEach(s),In=n(_e," ecosystem, a bunch of tools to help extracting the syntax tree or converting between content formats like markdown or html. To convert a markdown file into html, we could simply:"),_e.forEach(s),Xe=u(t),ot=l(t,"PRE",{class:!0});var ml=p(ot);ml.forEach(s),ts=u(t),vt=l(t,"P",{});var Vo=p(vt);jn=n(Vo,"Notice that unifiedjs is organized with multi-repo pattern and all the packages imported in the above snippet are in separate repos."),Vo.forEach(s),es=u(t),$=l(t,"P",{});var cs=p($);Cn=n(cs,"To get the title of the markdown file for index page, I added a metadata section to the markdown file. I\u2019m not sure if I did this in the correctly, so I\u2019m not going to describe my solution. If you have interest in parsing the metadata of the markdown, please refer to the "),lt=l(cs,"A",{href:!0,rel:!0});var Jo=p(lt);ve=l(Jo,"CODE",{});var Uo=p(ve);Pn=n(Uo,"markdown.js"),Uo.forEach(s),Jo.forEach(s),Dn=n(cs," file in the repo."),cs.forEach(s),ss=u(t),wt=l(t,"H2",{});var Qo=p(wt);On=n(Qo,"Conclusion"),Qo.forEach(s),as=u(t),yt=l(t,"P",{});var Yo=p(yt);Tn=n(Yo,"Hurray! We have built a blog app that runs locally. Next I will show you how to deploy the blog to Github Pages."),Yo.forEach(s),ns=u(t),_t=l(t,"H2",{});var Zo=p(_t);Kn=n(Zo,"Tips"),Zo.forEach(s),os=u(t),F=l(t,"P",{});var is=p(F);An=n(is,"Some confusing errors could be solved by moving the dependencies to "),we=l(is,"CODE",{});var Xo=p(we);Hn=n(Xo,"devDependencies"),Xo.forEach(s),Nn=n(is," due to some bugs of Vite."),is.forEach(s),this.h()},h(){d(E,"href","https://svelte.dev/blog/sveltekit-beta"),d(E,"rel","nofollow"),d(w,"href","https://www.youtube.com/watch?v=qSfdtmcZ4d0"),d(w,"rel","nofollow"),d(z,"href","https://svelte.dev/"),d(z,"rel","nofollow"),d(G,"href","https://kit.svelte.dev/"),d(G,"rel","nofollow"),d(B,"href","https://vitejs.dev/"),d(B,"rel","nofollow"),d(V,"href","https://svelte.dev/tutorial/basics"),d(V,"rel","nofollow"),d(J,"href","https://kit.svelte.dev/docs"),d(J,"rel","nofollow"),d(U,"class","language-undefined"),d(Q,"class","language-html"),d(Y,"class","language-html"),d(Z,"class","language-js"),d(X,"class","language-js"),d(tt,"class","language-html"),d(et,"href","https://github.com/remarkjs/remark"),d(et,"rel","nofollow"),d(st,"href","https://www.gatsbyjs.com/"),d(st,"rel","nofollow"),d(at,"href","https://github.com/remarkjs/remark"),d(at,"rel","nofollow"),d(nt,"href","https://unifiedjs.com/"),d(nt,"rel","nofollow"),d(ot,"class","language-js"),d(lt,"href","https://github.com/svelteland/svelte-kit-blog-demo/blob/main/src/lib/markdown.js"),d(lt,"rel","nofollow")},m(t,c){i(t,k,c),e(k,x),e(k,E),e(E,q),e(k,m),e(k,w),e(w,ct),e(k,rs),i(t,be,c),i(t,it,c),e(it,us),i(t,Ee,c),i(t,rt,c),e(rt,ds),i(t,ge,c),i(t,W,c),e(W,z),e(z,ks),e(W,fs),i(t,xe,c),i(t,H,c),e(H,G),e(G,hs),e(H,ms),e(H,B),e(B,vs),e(H,ws),i(t,Se,c),i(t,ut,c),e(ut,ys),i(t,Ie,c),i(t,S,c),e(S,_s),e(S,V),e(V,bs),e(S,Es),e(S,J),e(J,gs),e(S,xs),i(t,je,c),i(t,dt,c),e(dt,Ss),i(t,Ce,c),i(t,kt,c),e(kt,Is),i(t,Pe,c),i(t,I,c),e(I,Pt),e(Pt,js),e(I,Cs),e(I,Dt),e(Dt,Ps),e(I,Ds),e(I,Ot),e(Ot,Os),i(t,De,c),i(t,g,c),e(g,Ts),e(g,Tt),e(Tt,Ks),e(g,As),e(g,Kt),e(Kt,Hs),e(g,Ns),e(g,At),e(At,Rs),e(g,Ls),i(t,Oe,c),i(t,U,c),U.innerHTML=al,i(t,Te,c),i(t,f,c),e(f,$s),e(f,Ht),e(Ht,Fs),e(f,Ms),e(f,Nt),e(Nt,qs),e(f,Ws),e(f,Rt),e(Rt,zs),e(f,Gs),e(f,Lt),e(Lt,Bs),e(f,Vs),e(f,$t),e($t,Js),e(f,Us),e(f,Ft),e(Ft,Qs),e(f,Ys),e(f,Mt),e(Mt,Zs),e(f,Xs),e(f,qt),e(qt,ta),e(f,ea),e(f,Wt),e(Wt,sa),e(f,aa),e(f,zt),e(zt,na),e(f,oa),i(t,Ke,c),i(t,j,c),e(j,la),e(j,Gt),e(Gt,pa),e(j,ca),e(j,Bt),e(Bt,ia),e(j,ra),i(t,Ae,c),i(t,ft,c),e(ft,ua),i(t,He,c),i(t,y,c),e(y,da),e(y,Vt),e(Vt,ka),e(y,fa),e(y,Jt),e(Jt,ha),e(y,ma),e(y,Ut),e(Ut,va),e(y,wa),e(y,Qt),e(Qt,ya),e(y,_a),i(t,Ne,c),i(t,Q,c),Q.innerHTML=nl,i(t,Re,c),i(t,C,c),e(C,ba),e(C,Yt),e(Yt,Ea),e(C,ga),e(C,Zt),e(Zt,xa),e(C,Sa),i(t,Le,c),i(t,Y,c),Y.innerHTML=ol,i(t,$e,c),i(t,ht,c),e(ht,Ia),i(t,Fe,c),i(t,R,c),e(R,ja),e(R,Xt),e(Xt,Ca),e(R,Pa),i(t,Me,c),i(t,v,c),e(v,Da),e(v,te),e(te,Oa),e(v,Ta),e(v,ee),e(ee,Ka),e(v,Aa),e(v,se),e(se,Ha),e(v,Na),e(v,ae),e(ae,Ra),e(v,La),e(v,ne),e(ne,$a),e(v,Fa),e(v,oe),e(oe,Ma),e(v,qa),i(t,qe,c),i(t,Z,c),Z.innerHTML=ll,i(t,We,c),i(t,L,c),e(L,Wa),e(L,le),e(le,za),e(L,Ga),i(t,ze,c),i(t,P,c),e(P,Ba),e(P,pe),e(pe,Va),e(P,Ja),e(P,ce),e(ce,Ua),e(P,Qa),i(t,Ge,c),i(t,X,c),X.innerHTML=pl,i(t,Be,c),i(t,D,c),e(D,Ya),e(D,ie),e(ie,Za),e(D,Xa),e(D,re),e(re,tn),e(D,en),i(t,Ve,c),i(t,tt,c),tt.innerHTML=cl,i(t,Je,c),i(t,_,c),e(_,sn),e(_,ue),e(ue,an),e(_,nn),e(_,de),e(de,on),e(_,ln),e(_,ke),e(ke,pn),e(_,cn),e(_,fe),e(fe,rn),e(_,un),i(t,Ue,c),i(t,O,c),e(O,dn),e(O,he),e(he,kn),e(O,fn),e(O,me),e(me,hn),e(O,mn),i(t,Qe,c),i(t,mt,c),e(mt,vn),i(t,Ye,c),i(t,T,c),e(T,wn),e(T,et),e(et,yn),e(T,_n),e(T,st),e(st,bn),e(T,En),i(t,Ze,c),i(t,N,c),e(N,at),e(at,gn),e(N,xn),e(N,nt),e(nt,Sn),e(N,In),i(t,Xe,c),i(t,ot,c),ot.innerHTML=il,i(t,ts,c),i(t,vt,c),e(vt,jn),i(t,es,c),i(t,$,c),e($,Cn),e($,lt),e(lt,ve),e(ve,Pn),e($,Dn),i(t,ss,c),i(t,wt,c),e(wt,On),i(t,as,c),i(t,yt,c),e(yt,Tn),i(t,ns,c),i(t,_t,c),e(_t,Kn),i(t,os,c),i(t,F,c),e(F,An),e(F,we),e(we,Hn),e(F,Nn)},p:jl,d(t){t&&s(k),t&&s(be),t&&s(it),t&&s(Ee),t&&s(rt),t&&s(ge),t&&s(W),t&&s(xe),t&&s(H),t&&s(Se),t&&s(ut),t&&s(Ie),t&&s(S),t&&s(je),t&&s(dt),t&&s(Ce),t&&s(kt),t&&s(Pe),t&&s(I),t&&s(De),t&&s(g),t&&s(Oe),t&&s(U),t&&s(Te),t&&s(f),t&&s(Ke),t&&s(j),t&&s(Ae),t&&s(ft),t&&s(He),t&&s(y),t&&s(Ne),t&&s(Q),t&&s(Re),t&&s(C),t&&s(Le),t&&s(Y),t&&s($e),t&&s(ht),t&&s(Fe),t&&s(R),t&&s(Me),t&&s(v),t&&s(qe),t&&s(Z),t&&s(We),t&&s(L),t&&s(ze),t&&s(P),t&&s(Ge),t&&s(X),t&&s(Be),t&&s(D),t&&s(Ve),t&&s(tt),t&&s(Je),t&&s(_),t&&s(Ue),t&&s(O),t&&s(Qe),t&&s(mt),t&&s(Ye),t&&s(T),t&&s(Ze),t&&s(N),t&&s(Xe),t&&s(ot),t&&s(ts),t&&s(vt),t&&s(es),t&&s($),t&&s(ss),t&&s(wt),t&&s(as),t&&s(yt),t&&s(ns),t&&s(_t),t&&s(os),t&&s(F)}}}function Dl(pt){let k,x;const E=[pt[0],sl];let q={$$slots:{default:[Pl]},$$scope:{ctx:pt}};for(let m=0;m<E.length;m+=1)q=Ln(q,E[m]);return k=new Cl({props:q}),{c(){_l(k.$$.fragment)},l(m){bl(k.$$.fragment,m)},m(m,w){El(k,m,w),x=!0},p(m,[w]){const ct=w&1?gl(E,[w&1&&tl(m[0]),w&0&&tl(sl)]):{};w&2&&(ct.$$scope={dirty:w,ctx:m}),k.$set(ct)},i(m){x||(xl(k.$$.fragment,m),x=!0)},o(m){Sl(k.$$.fragment,m),x=!1},d(m){Il(k,m)}}}const sl={title:"Create Your Blog with SvelteKit",date:"2021-04-03",description:"It's time to rewrite your blog in SvelteKit!"};function Ol(pt,k,x){return pt.$$set=E=>{x(0,k=Ln(Ln({},k),el(E)))},k=el(k),[k]}class Al extends vl{constructor(k){super();wl(this,k,Ol,Dl,yl,{})}}export{Al as default,sl as metadata};
